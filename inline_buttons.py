from dip import InlineKeyboardMarkup,InlineKeyboardButton,dp,types,bot,State, StatesGroup,Text,FSMContext,ReplyKeyboardMarkup,ReplyKeyboardRemove,KeyboardButton
import os,json,aiohttp,aiogram,datetime
from aiogram.types import LabeledPrice
from aiogram.types.message import ContentTypes
from hack import autovseosvita
from utils import ChangeToMainMenu, CheckRefers, getman,getbalance,setbalance,insertuser,VozvratToMenu,AddLogs,c,conn,times,InsertAllBalance,minusallbalance
from hack import autonaurok, hackvseo,hacknaurok
from random import randint
from datetime import datetime, timedelta


Config = json.loads(open("configuration.json", "r", encoding="utf-8").read())

PAYMENTSTOKEN = "535936410:LIVE:5589410392_8ceaceda-a958-4ce6-b32d-25d1f242a6b6"

MainMenu = InlineKeyboardMarkup()

AddBalance = InlineKeyboardButton("üí≥–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Åüí≥", callback_data="AddBalance")
VseOsvita = InlineKeyboardButton("üìò–í—Å–µ–û—Å–≤–∏—Ç–∞üìò", callback_data="VseOsvita")
NaUrok = InlineKeyboardButton("üìô–ù–∞–£—Ä–æ–∫üìô", callback_data="Naurok")
FAQ = InlineKeyboardButton("‚ùì–ß–∞–í–æ‚ùì", callback_data="FAQ")
HELP = InlineKeyboardButton("üë∫–ü–æ–º–æ—â—åüë∫", callback_data="HELP")
REFER = InlineKeyboardButton("‚úâÔ∏è–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞‚úâÔ∏è", callback_data="REFER")
MainMenu.row(NaUrok)

nazadhelp = InlineKeyboardMarkup().add(InlineKeyboardButton("–ß—Ç–æ —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å –ø—Ä–∏ –ø–æ–∫—É–ø–∫–∏ —Ç–µ—Å—Ç–∞ –í—Å–µ–û—Å–≤–∏—Ç–∞", url="https://youtu.be/tLvm6FVEnH4")).add(InlineKeyboardButton("–ß—Ç–æ —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å –ø—Ä–∏ –ø–æ–∫—É–ø–∫–∏ —Ç–µ—Å—Ç–∞ –ù–∞–£—Ä–æ–∫", url="https://youtu.be/0x8TOjQzzLY")).add(InlineKeyboardButton("‚¨ÖÔ∏è–ù–∞–∑–∞–¥",callback_data="NAZAD"))

nazad = InlineKeyboardMarkup().add(InlineKeyboardButton("‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data="NAZAD"))
#FAQMENU = InlineKeyboardMarkup().row(InlineKeyboardButton("–í—Å–µ–û—Å–≤–∏—Ç–∞", url="https://youtu.be/SIjLU-TO9po"), InlineKeyboardButton("–ù–∞–£—Ä–æ–∫", url="https://youtu.be/PRRCbOOnsQY")).add(InlineKeyboardButton("‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data="NAZAD"))

vseosvitahelp = InlineKeyboardButton("–ü–æ–º–æ—â—å –ø–æ –í—Å–µ–û—Å–≤–∏—Ç–µ", url="https://youtu.be/SIjLU-TO9po")
naurokhelp = InlineKeyboardButton("–ü–æ–º–æ—â—å –ø–æ –ù–∞–£—Ä–æ–∫—É", url="https://youtu.be/wtrYyAuJ2Ck")
vvedkoda = InlineKeyboardMarkup().add(InlineKeyboardButton("–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="Oplata")).row(InlineKeyboardButton("–í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="PromoCode"),InlineKeyboardButton("–ü–æ–º–æ—â—å –≤ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏", url="https://telegra.ph/Popolnenie-balansa-v-Answer4You-08-11")).add(InlineKeyboardButton("‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data="NAZAD"))
stop = InlineKeyboardMarkup().add(InlineKeyboardButton("‚õîÔ∏èC–¢–û–ü‚õîÔ∏è", callback_data="stop"))


vibornaurok = InlineKeyboardMarkup().add(InlineKeyboardButton("–û–±—ã—á–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤", callback_data="TypicalNaurok")).add(InlineKeyboardButton("‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data="NAZAD"))

viborvseosvita = InlineKeyboardMarkup().add(InlineKeyboardButton("–û–±—ã—á–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤", callback_data="TypicalVseOsvita")).add(InlineKeyboardButton("–ê–≤—Ç–æ-–ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞", callback_data="Zaglushka")).add(InlineKeyboardButton("‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data="NAZAD"))

class Form(StatesGroup):
    oplata = State()
    promocode = State()
    vseosvita = State()
    naurok = State()
    OneStepAutoProxodNaUrok = State()
    TwoStepAutoProxodNaUrok = State()
    ThreeStepAutoProxodNaUrok = State()
    FinallyStepAutoProxodNaUrok = State()
    VseOsvita1Auto = State()
    VseOsvita2Auto = State()
    VseOsvita3Auto = State()
    VseOsvita4Auto = State()
    VseOsvita5Auto = State()
#NaUrok
OneStepAutoNaurok = InlineKeyboardMarkup().add(InlineKeyboardButton("‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data="OneStepAutoNaurokNAZAD"))
TwoStepAutoNaurok = InlineKeyboardMarkup().add(InlineKeyboardButton("‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data="TwoStepAutoNaurokNAZAD"))
ThreeStepAutoNaUrok = InlineKeyboardMarkup().add(InlineKeyboardButton("‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data="ThreeStepAutoNaurokNAZAD"))
FinallyStepAutoNaUrok = InlineKeyboardMarkup().add(InlineKeyboardButton("‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data="FinallyStepAutoNaurokNAZAD")).add(InlineKeyboardButton("‚õîÔ∏èC–¢–û–ü‚õîÔ∏è", callback_data="stop"))
#VseOsvita
VseOsvita1AutoMarkup = InlineKeyboardMarkup().add(InlineKeyboardButton("‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data="VseOsvita1AutoNAZAD"))
VseOsvita2AutoMarkup = InlineKeyboardMarkup().add(InlineKeyboardButton("‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data="VseOsvita2AutoNAZAD"))
VseOsvita3AutoMarkup = InlineKeyboardMarkup().add(InlineKeyboardButton("‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data="VseOsvita3AutoNAZAD"))
VseOsvita4AutoMarkup = InlineKeyboardMarkup().add(InlineKeyboardButton("‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data="VseOsvita4AutoNAZAD"))
VseOsvita5AutoMarkup = InlineKeyboardMarkup().add(InlineKeyboardButton("‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data="VseOsvita5AutoNAZAD")).add(InlineKeyboardButton("‚õîÔ∏èC–¢–û–ü‚õîÔ∏è", callback_data="stop"))

stopnaurok = InlineKeyboardMarkup().add(InlineKeyboardButton("–ü–æ–º–æ—â—å –ø–æ –ù–∞–£—Ä–æ–∫—É", url="https://youtu.be/0x8TOjQzzLY")).add(InlineKeyboardButton("‚õîÔ∏èC–¢–û–ü‚õîÔ∏è", callback_data="stop"))
stopvseosvita = InlineKeyboardMarkup().add(InlineKeyboardButton("–ü–æ–º–æ—â—å –ø–æ –í—Å–µ–û—Å–≤–∏—Ç–µ", url="https://youtu.be/tLvm6FVEnH4")).add(InlineKeyboardButton("‚õîÔ∏èC–¢–û–ü‚õîÔ∏è", callback_data="stop"))

@dp.callback_query_handler(lambda call: call.data, black_list=True, tex=True)
async def callbackquery(call: types.CallbackQuery, state: FSMContext):
    insertuser(call.from_user.id, call.from_user.first_name, call.from_user.username)
    messagecall = call.message.message_id
    if call.data == "AddBalance": #–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∏–∫–∞
        await bot.edit_message_text("–ü—Ä–æ–º–æ–∫–æ–¥ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –±–æ—Ç–∞\n‚ùóÔ∏è–í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –Ω–µ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è‚ùóÔ∏è",call.message.chat.id, messagecall, reply_markup=vvedkoda, parse_mode="MarkDownV2", disable_web_page_preview=True)
    elif call.data == "VseOsvita": #–í—Å–µ–û—Å–≤–∏—Ç–∞
        await bot.edit_message_text("–û–±—ã—á–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤: –ë–æ—Ç –¥–∞–µ—Ç —Ç–µ–±–µ –æ—Ç–≤–µ—Ç—ã —Ç—ã —Å–∞–º –ø—Ä–æ—Ö–æ–¥–∏—à—å —Ç–µ—Å—Ç\n–ê–≤—Ç–æ-–ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞: –ë–æ—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç –∑–∞ —Ç–µ–±—è —Ç–µ—Å—Ç(–î–æ—Ä–æ–∂–µ)",call.message.chat.id, messagecall, reply_markup=viborvseosvita)
    elif call.data == "AutoProxodVseOsvita": 
        x = await bot.edit_message_text("–°–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤—Ö–æ–¥ —Ç–µ—Å—Ç–∞", call.message.chat.id, messagecall, reply_markup=VseOsvita1AutoMarkup)
        await Form.VseOsvita1Auto.set()
        async with state.proxy() as data:
            data["id"] = x.message_id  
    elif call.data == "TypicalVseOsvita":
        await Form.vseosvita.set()
        await bot.edit_message_text("–°–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤—Ö–æ–¥ —Ç–µ—Å—Ç–∞", call.message.chat.id, messagecall, reply_markup=stopvseosvita, parse_mode="HTML")
        async with state.proxy() as data:
            data["id"] = messagecall
    elif call.data == "NaurokNotValid": #NAUROK
        await bot.edit_message_text("–û–±—ã—á–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤: –ë–æ—Ç –¥–∞–µ—Ç —Ç–µ–±–µ –æ—Ç–≤–µ—Ç—ã —Ç—ã —Å–∞–º –ø—Ä–æ—Ö–æ–¥–∏—à—å —Ç–µ—Å—Ç", call.message.chat.id, messagecall, reply_markup=vibornaurok)       
    elif call.data == "AutoProxodNaurok": 
        x = await bot.edit_message_text("–°–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å —Ç–µ—Å—Ç–∞", call.message.chat.id, messagecall, reply_markup=OneStepAutoNaurok)
        await Form.OneStepAutoProxodNaUrok.set()
        async with state.proxy() as data:
            data["id"] = x.message_id  
    elif call.data == "Naurok":
        await Form.naurok.set()
        await bot.edit_message_text("–°–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å —Ç–µ—Å—Ç–∞", call.message.chat.id, messagecall, reply_markup=stopnaurok, parse_mode="HTML")
        async with state.proxy() as data:
            data["id"] = messagecall
    elif call.data == "Oplata":
        await Form.oplata.set()
        await bot.edit_message_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", call.message.chat.id,messagecall,reply_markup=stop)
        async with state.proxy() as data:
            data["id"] = messagecall
    elif call.data == "PromoCode":
        await Form.promocode.set()
        await bot.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∫–æ—Ç–æ—Ä—ã–π –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤", call.message.chat.id,messagecall,reply_markup=stop)
        async with state.proxy() as data:
            data["id"] = messagecall  
@dp.callback_query_handler(lambda call: call.data) #–ï–°–õ–ò –î–û–ë–ê–õ–í–Ø–¢–¨ –°–Æ–î–ê –ù–û–í–£–Æ –ö–ù–û–ü–ö–£ –ï–ï –¢–ê–ö–ñ–ï –ù–ê–î–û –î–û–ë–ê–í–õ–Ø–¢–¨ –í –ú–ê–°–°–ò–í WithoutTexData –≤ filter
async def withouttex(call: types.CallbackQuery):
    insertuser(call.from_user.id, call.from_user.first_name, call.from_user.username)
    messagecall = call.message.message_id
    if call.data == "HELP":
        await bot.edit_message_text(chat_id=call.message.chat.id,  message_id=messagecall, text=Config["HelpMenu"], parse_mode="HTML", disable_web_page_preview=True, reply_markup=nazadhelp)
    elif call.data == "REFER":
        referrs = CheckRefers(call.from_user.id)
        if referrs == None:
            await bot.edit_message_text("–í–æ—Ç –≤–∞—à–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n"+ f"<code>https://t.me/answers4youbot?start={call.from_user.id}</code>\n–£—Å–ª–æ–≤–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã: –ó–∞ –∫–∞–∂–¥–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ –∏ –æ–Ω –ø–æ–ø–æ–ª–Ω–∏–ª 30 –≥—Ä–Ω, –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ - 5 –≥—Ä–Ω\n–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –≤–∞—Å: 0 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤", call.message.chat.id,messagecall,reply_markup=nazad, parse_mode="HTML")
        else:
            await bot.edit_message_text("–í–æ—Ç –≤–∞—à–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n"+ f"<code>https://t.me/answers4youbot?start={call.from_user.id}</code>\n\n–£—Å–ª–æ–≤–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã: –ó–∞ –∫–∞–∂–¥–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ –∏ –æ–Ω –ø–æ–ø–æ–ª–Ω–∏–ª 30 –≥—Ä–Ω, –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ - 5 –≥—Ä–Ω\n\n–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –≤–∞—Å: {len(referrs)} —Ä–µ—Ñ–µ—Ä–∞–ª/-–∞/-–æ–≤", call.message.chat.id,messagecall,reply_markup=nazad, parse_mode="HTML")
    elif call.data == "stop": #–°—Ç–æ–ø —Ä–µ—à–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤
        await ChangeToMainMenu(call.message.chat.id, messagecall)
    elif call.data == "NAZAD": #–ö–Ω–æ–ø–∫–∞ —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é
        await ChangeToMainMenu(call.message.chat.id, messagecall)
    elif call.data == "OneStepAutoNaurokNAZAD" or call.data == "TwoStepAutoNaurokNAZAD" or call.data == "ThreeStepAutoNaurokNAZAD" or call.data == "FinallyStepAutoNaurokNAZAD" or call.data == "VseOsvita1AutoNAZAD" or call.data == "VseOsvita2AutoNAZAD" or call.data == "VseOsvita3AutoNAZAD" or call.data == "VseOsvita4AutoNAZAD":
        await ChangeToMainMenu(call.message.chat.id, messagecall)

@dp.callback_query_handler(lambda call: call.data, state="*") 
async def cancel_handler(call: types.CallbackQuery, state: FSMContext):
    if call.data == "stop":
            await ChangeToMainMenu(call.message.chat.id, call.message.message_id) 
            await state.finish()
    elif call.data == "OneStepAutoNaurokNAZAD":
        await bot.edit_message_text("–û–±—ã—á–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤: –ë–æ—Ç –¥–∞–µ—Ç —Ç–µ–±–µ –æ—Ç–≤–µ—Ç—ã —Ç—ã —Å–∞–º –ø—Ä–æ—Ö–æ–¥–∏—à—å —Ç–µ—Å—Ç\n–ê–≤—Ç–æ-–ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞: –ë–æ—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç –∑–∞ —Ç–µ–±—è —Ç–µ—Å—Ç(–î–æ—Ä–æ–∂–µ)", call.message.chat.id, call.message.message_id, reply_markup=vibornaurok)               
        await state.finish()
    elif call.data == "TwoStepAutoNaurokNAZAD":
        await bot.edit_message_text("–°–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å —Ç–µ—Å—Ç–∞", call.message.chat.id, call.message.message_id, reply_markup=OneStepAutoNaurok)       
        await Form.OneStepAutoProxodNaUrok.set()
    elif call.data == "ThreeStepAutoNaurokNAZAD":
        async with state.proxy() as data:
            Questions = data["Questions"]
            await bot.edit_message_text(f"–£–∫–∞–∂–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ –Ω–µ–≤–µ—Ä–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å(—á–∏—Å–ª–æ–º)\n–í–æ–ø—Ä–æ—Å–æ–≤ –≤ —Ç–µ—Å—Ç–µ: <b>{Questions['document']['questions']}</b>", call.message.chat.id, data["id"], reply_markup=TwoStepAutoNaurok, parse_mode="HTML")        
            await Form.TwoStepAutoProxodNaUrok.set()
    elif call.data == "FinallyStepAutoNaurokNAZAD":
        async with state.proxy() as data:
            Questions = data["Questions"]
            await bot.edit_message_text(f"–£–∫–∞–∂–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –≤ —Ü–µ–ª–æ–º –Ω–∞ —Ç–µ—Å—Ç\n–£–∫–∞–∑—ã–≤–∞—Ç—å –≤—Ä–µ–º—è —Å –ø–æ–º–æ—â—å—é –ø—Ä–∏—Å—Ç–∞–≤–æ–∫: s\\m\\h\n–ü—Ä–∏–º–µ—Ä: 10m\ns - —Å–µ–∫—É–Ω–¥—ã, m - –º–∏–Ω—É—Ç—ã\n–ú–∞–∫—Å–∏–º—É–º - 35 –º–∏–Ω—É—Ç", call.message.chat.id, data["id"], reply_markup=ThreeStepAutoNaUrok)
            await Form.ThreeStepAutoProxodNaUrok.set()
    elif call.data == "VseOsvita1AutoNAZAD":
        await bot.edit_message_text("–û–±—ã—á–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤: –ë–æ—Ç –¥–∞–µ—Ç —Ç–µ–±–µ –æ—Ç–≤–µ—Ç—ã —Ç—ã —Å–∞–º –ø—Ä–æ—Ö–æ–¥–∏—à—å —Ç–µ—Å—Ç\n–ê–≤—Ç–æ-–ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞: –ë–æ—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç –∑–∞ —Ç–µ–±—è —Ç–µ—Å—Ç(–î–æ—Ä–æ–∂–µ)", call.message.chat.id, call.message.message_id, reply_markup=viborvseosvita)               
        await state.finish()
    elif call.data == "VseOsvita2AutoNAZAD":
        async with state.proxy() as data:
            await bot.edit_message_text("–°–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤—Ö–æ–¥ —Ç–µ—Å—Ç–∞", call.message.chat.id, data["id"], reply_markup=VseOsvita1AutoMarkup)
            await Form.VseOsvita1Auto.set()
    elif call.data == "VseOsvita3AutoNAZAD":
        async with state.proxy() as data:
            Init = data["Init"]
            await bot.edit_message_text(f"–£–∫–∞–∂–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ –Ω–µ–≤–µ—Ä–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å(—á–∏—Å–ª–æ–º)\n–í–æ–ø—Ä–æ—Å–æ–≤ –≤ —Ç–µ—Å—Ç–µ: <b>{Init['execution']['count_quest']}</b>", call.message.chat.id, data["id"], reply_markup=VseOsvita2AutoMarkup, parse_mode="HTML")        
            await Form.VseOsvita2Auto.set()
    elif call.data == "VseOsvita4AutoNAZAD":
        async with state.proxy() as data:
            await bot.edit_message_text(f"–£–∫–∞–∂–∏—Ç–µ –∫–∞–∫–æ–µ –∏–º—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∏ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞", call.message.chat.id, data["id"], reply_markup=VseOsvita3AutoMarkup)
            await Form.VseOsvita3Auto.set()
    elif call.data == "VseOsvita5AutoNAZAD":
        async with state.proxy() as data:
            await bot.edit_message_text(f"–£–∫–∞–∂–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –≤ —Ü–µ–ª–æ–º –Ω–∞ —Ç–µ—Å—Ç\n–£–∫–∞–∑—ã–≤–∞—Ç—å –≤—Ä–µ–º—è —Å –ø–æ–º–æ—â—å—é –ø—Ä–∏—Å—Ç–∞–≤–æ–∫: s\\m\\h\n–ü—Ä–∏–º–µ—Ä: 10m\ns - —Å–µ–∫—É–Ω–¥—ã, m - –º–∏–Ω—É—Ç—ã\n–ú–∞–∫—Å–∏–º—É–º - 35 –º–∏–Ω—É—Ç", call.message.chat.id, data["id"], reply_markup=VseOsvita4AutoMarkup)
            await Form.VseOsvita4Auto.set()
@dp.message_handler(state=Form.promocode)
async def promocode(message:type, state:FSMContext):
    try:
        await bot.delete_message(message.chat.id, message.message_id)
        c.execute("select * from promo where id = %s", (message.text.lower(),))
        x = c.fetchone()
        if x == None or message.from_user.id in list(x[2]):
            async with state.proxy() as data:
                await VozvratToMenu("–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –≤–µ—Ä–Ω—ã–π –∏–ª–∏ –±—ã–ª —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω!", message.chat.id, data["id"], state)
        else:
            if x[3] == None:
                used = list(x[2])
                used.append(message.from_user.id)
                c.execute("update promo set used = %s where id = %s", (json.dumps(used), message.text.lower()))
                balance = getbalance(message.from_user.id)+x[1]
                c.execute("update users set balance = %s where id = %s", (balance,message.from_user.id))
                conn.commit()
                async with state.proxy() as data:
                    await VozvratToMenu(f"–ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–∏–ª –≤–∞—à –±–∞–ª–∞–Ω—Å –Ω–∞ {x[1]} –≥—Ä–Ω", message.chat.id, data["id"], state)
            else:
                used = list(x[2])
                used.append(message.from_user.id)
                c.execute("update promo set used = %s where id = %s", (json.dumps(used), message.text.lower()))
                c.execute("update promo set count = %s where id = %s", (x[3]-1, message.text.lower()))
                balance = getbalance(message.from_user.id)+x[1]
                c.execute("update users set balance = %s where id = %s", (balance,message.from_user.id))
                conn.commit()
                async with state.proxy() as data:
                    await VozvratToMenu(f"–ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–∏–ª –≤–∞—à –±–∞–ª–∞–Ω—Å –Ω–∞ {x[1]} –≥—Ä–Ω", message.chat.id, data["id"], state)
                c.execute("select * from promo where id = %s", (message.text.lower(),))
                x = c.fetchone()
                if x[3] == 0:
                    c.execute("delete from promo where id = %s", (message.text.lower(),))
                    conn.commit()
                    await bot.send_message(620038501, f"–ü—Ä–æ–º–æ–∫–æ–¥ {x[0]} –∑–∞–≤–µ—Ä—à–∏–ª —Å–≤–æ–π —Ü–∏–∫–ª –∂–∏–∑–Ω–∏!")
    except:
        await state.finish()

@dp.message_handler(state=Form.oplata)
async def oplata(message:type, state: FSMContext):
    await bot.delete_message(message.chat.id, message.message_id)
    async with state.proxy() as data:
        messageid = data["id"]
    try:
        if str(message.text).isdigit():
            await bot.edit_message_text("–°–Ω–∏–∑—É‚¨áÔ∏è", message.chat.id, messageid)
            await bot.send_invoice(message.chat.id, f"–ë–∞–ª–∞–Ω—Å", "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞", "str23", provider_token=PAYMENTSTOKEN, currency="UAH", prices=[LabeledPrice('–°—É–º–º–∞', int(str(message.text)+"0"+"0"))], reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å", pay=True)))
            await state.finish()
        else:
            await bot.edit_message_text("–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É —Ü–∏—Ñ—Ä–æ–π!", message.chat.id, messageid, reply_markup=nazad)
    except: 
        await state.finish()
@dp.message_handler(content_types=ContentTypes.SUCCESSFUL_PAYMENT)
async def SUCCESSFUL(message: types.message):
    toadd = list(str(message.successful_payment.total_amount))
    toadd.remove(toadd[-1])
    toadd.remove(toadd[-1])
    toadd = int(''.join(toadd))
    balance = getbalance(message.from_user.id)
    setbalance(message.from_user.id, balance+toadd)
    AddLogs(f"<a href='tg://user?id={message.from_user.id}'>{message.from_user.first_name}</a>({message.from_user.id}) —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∏–∑–≤–µ–ª –æ–ø–ª–∞—Ç—É –≤ {toadd} –≥—Ä–Ω")
    await bot.send_message(message.chat.id, Config["LastChange"], parse_mode="HTML", reply_markup=MainMenu)
    InsertAllBalance(message.from_user.id, toadd)
    man = getman(message.from_user.id)
    if man[5] == 30 and man[4] != None:
        balancereferer = getbalance(man[4])
        setbalance(man[4], balancereferer+5)
        minusallbalance(message.from_user.id)
        try:
            await bot.send_message(man[4], "–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–æ–ø–æ–ª–Ω–∏–ª–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –Ω–∞ 5 –≥—Ä–Ω!")
        except:
            pass
    elif man[5] > 30 and man[4] != None:
        toaddref = 0
        balancereferer = getbalance(man[4])
        for i in range(0,int(man[5]/30)):
            toaddref+=5
            minusallbalance(message.from_user.id)
            setbalance(man[4], balancereferer+toaddref)
        try:
            await bot.send_message(man[4], f"–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–æ–ø–æ–ª–Ω–∏–ª–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –Ω–∞ {toaddref} –≥—Ä–Ω!")
        except: 
            pass
@dp.pre_checkout_query_handler(lambda query: True)
async def checkout(pre_checkout_query: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True, error_message="–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º !")
@dp.message_handler(state=Form.vseosvita)
async def vseosvita(message: types.Message, state: FSMContext):
    try:
        balance = getbalance(message.from_user.id)
        if balance == None or balance < Config["PriceVseOsvita"]:
            await bot.delete_message(message.chat.id, message.message_id)
            async with state.proxy() as data:
                await VozvratToMenu("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å!", message.chat.id, data["id"], state)
        else:        
            async with state.proxy() as data:
                await bot.edit_message_text("–ù–∞—á–∏–Ω–∞—é –ø–æ–ª—É—á–∞—Ç—å –æ—Ç–≤–µ—Ç—ã —Å —Ç–µ—Å—Ç–∞.....", message.chat.id, data["id"])
            AddLogs(f"<a href='tg://user?id={message.from_user.id}'>{message.from_user.first_name}</a>({message.from_user.id}) –Ω–∞—á–∞–ª —Ä–µ—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞ –í—Å–µ–û—Å–≤–∏—Ç—ã! (—Å–ø–∏—Å–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤-)(–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {getbalance(message.from_user.id)})")
            html = await hackvseo.HackVseo(message.text)
            if html == "NeVseOsvita":
                await bot.delete_message(message.chat.id, message.message_id)
                async with state.proxy() as data:
                    try:
                        await bot.edit_message_text("–ù–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –í—Å–µ–û—Å–≤–∏—Ç—É\n–ü—Ä–∏–º–µ—Ä: https://vseosvita.ua/test/start/dfg621",message.chat.id,data["id"], reply_markup=stop)
                    except:
                        return
            elif html == "TestEnded":
                await bot.delete_message(message.chat.id, message.message_id)
                async with state.proxy() as data:
                    await VozvratToMenu("–¢–µ—Å—Ç –∑–∞–∫–æ–Ω—á–∏–ª–∏", message.chat.id, data["id"], state)
            else:
                idfile = randint(1000, 9999)
                f = open(f"{idfile}.html", "w+", encoding='utf-8')
                f.write(html["HTMLANSWER"])
                f.close()
                await bot.send_document(message.chat.id, open(f"{idfile}.html", "rb"))
                os.remove(f"{idfile}.html")
                setbalance(message.from_user.id, balance-Config["PriceVseOsvita"])
                AddLogs(f"<a href='tg://user?id={message.from_user.id}'>{message.from_user.first_name}</a>({message.from_user.id}) –ø–æ–ª—É—á–∏–ª –æ—Ç–≤–µ—Ç—ã —Å —Ç–µ—Å—Ç–∞ –í—Å–µ–û—Å–≤–∏—Ç—ã! (—Å–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤+ )(–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {getbalance(message.from_user.id)})")
                async with state.proxy() as data:
                    await ChangeToMainMenu(message.chat.id, data["id"])   
                await state.finish()             
    except: 
        await state.finish()
            

@dp.message_handler(state=Form.naurok)
async def naurok(message: types.Message, state: FSMContext):
    try:
        balance = getbalance(message.from_user.id) 
        if balance == None or balance < Config["PriceNaurok"]:
            await bot.delete_message(message.chat.id, message.message_id)
            async with state.proxy() as data:
                await VozvratToMenu("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å!", message.chat.id, data["id"], state)
        else:
            async with state.proxy() as data:
                try:
                    await bot.edit_message_text("–ù–∞—á–∏–Ω–∞—é –ø–æ–ª—É—á–∞—Ç—å –æ—Ç–≤–µ—Ç—ã —Å —Ç–µ—Å—Ç–∞...\n–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ—Å—Ç–∞", message.chat.id, data["id"])
                except aiogram.utils.exceptions.MessageNotModified:
                    return
            sesid = await hacknaurok.GetSessiondId(message.text)
            if sesid == "NotNaurok":
                await bot.delete_message(message.chat.id, message.message_id)
                async with state.proxy() as data:
                    await bot.edit_message_text("–ù–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –ù–∞–£—Ä–æ–∫\n–ü—Ä–∏–º–µ—Ä: https://naurok.com.ua/test/testing/160ff965-d7dd-4c04-9689-c71933784dff",message.chat.id, data["id"], reply_markup=stop)
            elif sesid == "TestEnded":
                await bot.delete_message(message.chat.id, message.message_id)
                async with state.proxy() as data:
                    await VozvratToMenu("–¢–µ—Å—Ç –∑–∞–∫–æ–Ω—á–µ–Ω", message.chat.id, data["id"], state)
            elif sesid == "WrongURL":
                await bot.send_message(message.chat.id, "–ß–∞–≤–æ? –û–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∞–º")
                await state.finish()
            else:
                AddLogs(f"<a href='tg://user?id={message.from_user.id}'>{message.from_user.first_name}</a>({message.from_user.id}) –Ω–∞—á–∞–ª —Ä–µ—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞ –ù–∞–£—Ä–æ–∫! (—Å–ø–∏—Å–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤-)(–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {getbalance(message.from_user.id)})")
                quest = await hacknaurok.GetQuestions(sesid)
                if quest == "Up80":
                    async with state.proxy() as data:
                        await VozvratToMenu("–ë–æ–ª—å—à–µ —Å—Ç–∞ –≤–æ–ø—Ä–æ—Å–æ–≤", message.chat.id, data["id"], state)
                    return
                itog = await hacknaurok.itog(quest)
                idfile = randint(1000, 9999)
                f = open(f"{idfile}.html", "w+", encoding='utf-8')
                f.write(itog)
                f.close()
                await bot.send_document(message.chat.id, open(f"{idfile}.html", "rb"))
                os.remove(f"{idfile}.html")
                setbalance(message.from_user.id, balance-Config["PriceNaurok"])  
                AddLogs(f"<a href='tg://user?id={message.from_user.id}'>{message.from_user.first_name}</a>({message.from_user.id}) –ø–æ–ª—É—á–∏–ª –æ—Ç–≤–µ—Ç—ã —Å —Ç–µ—Å—Ç–∞ –ù–∞—É—Ä–æ–∫! (—Å–ø–∏—Å–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤+)(–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {getbalance(message.from_user.id)})")  
                async with state.proxy() as data:
                    await ChangeToMainMenu(message.chat.id, data["id"])            
                await state.finish()    
    except:
        await state.finish()
            
@dp.message_handler(state=Form.OneStepAutoProxodNaUrok)
async def OneStepAutoProxodNaUrok(message: types.Message, state: FSMContext):
        balance = getbalance(message.from_user.id) 
        if balance == None or balance < Config["PriceAutoNaurok"]:
            await bot.delete_message(message.chat.id, message.message_id)
            async with state.proxy() as data:
                await VozvratToMenu("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å!", message.chat.id, data["id"], state)
        else:
            await bot.delete_message(message.chat.id, message.message_id)
            SesId = await hacknaurok.GetSessiondId(message.text)
            if SesId == "NotNaurok":
                try:
                    async with state.proxy() as data:
                        await bot.edit_message_text("–ù–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –ù–∞—É—Ä–æ–∫!\n–ü—Ä–∏–º–µ—Ä: https://naurok.com.ua/test/testing/160ff965-d7dd-4c04-9689-c71933784dff", message.chat.id, data["id"], reply_markup=OneStepAutoNaurok)
                    return
                except aiogram.utils.exceptions.MessageNotModified:
                    return
            elif SesId == "TestEnded":
                async with state.proxy() as data:
                    await VozvratToMenu("–¢–µ—Å—Ç –∑–∞–∫–æ–Ω—á–µ–Ω!", message.chat.id, data["id"], state)
                return
            elif SesId == "WrongURL":
                async with state.proxy() as data:
                    bot.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞! –û–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º", message.chat.id, data["id"])
                    await state.finish()
                return
            Questions = await hacknaurok.GetQuestions(SesId)
            if Questions == "Up80":
                async with state.proxy() as data:
                    await VozvratToMenu("–ë–æ–ª—å—à–µ —Å—Ç–∞ –≤–æ–ø—Ä–æ—Å–æ–≤", message.chat.id, data["id"], state)
                return
            async with state.proxy() as data:
                data["SesId"] = SesId
                data["Questions"] = Questions
                data["Url"] = message.text
                await bot.edit_message_text(f"–£–∫–∞–∂–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ –Ω–µ–≤–µ—Ä–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å(—á–∏—Å–ª–æ–º)\n–í–æ–ø—Ä–æ—Å–æ–≤ –≤ —Ç–µ—Å—Ç–µ: <b>{Questions['document']['questions']}</b>", message.chat.id, data["id"], reply_markup=TwoStepAutoNaurok, parse_mode="HTML")
                await Form.TwoStepAutoProxodNaUrok.set()
@dp.message_handler(state=Form.TwoStepAutoProxodNaUrok)
async def TwoStepAutoProxodNaUrok(message: types.message, state: FSMContext):
        await bot.delete_message(message.chat.id, message.message_id)
        try:
            async with state.proxy() as data:
                Questions = data["Questions"]
                MessageId = data["id"]
            if int(message.text) >= int(Questions["document"]["questions"]):
                try:
                    await bot.edit_message_text(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –±–æ–ª—å—à–µ —á–µ–º –≤–æ–ø—Ä–æ—Å–æ–≤!\n–í–æ–ø—Ä–æ—Å–æ–≤ –≤ —Ç–µ—Å—Ç–µ: <b>{Questions['document']['questions']}</b>", message.chat.id, MessageId, parse_mode="HTML", reply_markup=TwoStepAutoNaurok)
                    return
                except aiogram.utils.exceptions.MessageNotModified:
                    return
            async with state.proxy() as data:
                data["WrongAnswers"] = int(message.text)
                await bot.edit_message_text(f"–£–∫–∞–∂–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –≤ —Ü–µ–ª–æ–º –Ω–∞ —Ç–µ—Å—Ç\n–£–∫–∞–∑—ã–≤–∞—Ç—å –≤—Ä–µ–º—è —Å –ø–æ–º–æ—â—å—é –ø—Ä–∏—Å—Ç–∞–≤–æ–∫: s\\m\\h\n–ü—Ä–∏–º–µ—Ä: 10m\ns - —Å–µ–∫—É–Ω–¥—ã, m - –º–∏–Ω—É—Ç—ã\n–ú–∞–∫—Å–∏–º—É–º - 35 –º–∏–Ω—É—Ç", message.chat.id, MessageId, reply_markup=ThreeStepAutoNaUrok)
                await Form.ThreeStepAutoProxodNaUrok.set()
        except ValueError:
            try:
                await bot.edit_message_text(f"<b>–ß–ò–°–õ–û–û–û–ú!</b>\n–ö—Ö–º. . .\n–£–∫–∞–∂–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ –Ω–µ–≤–µ—Ä–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å(<b>–ß–ò–°–õ–û–ú</b>)\n–í–æ–ø—Ä–æ—Å–æ–≤ –≤ —Ç–µ—Å—Ç–µ: <b>{Questions['document']['questions']}</b>", message.chat.id, MessageId, reply_markup=TwoStepAutoNaurok, parse_mode="HTML")
            except aiogram.utils.exceptions.MessageNotModified:
                return

@dp.message_handler(state=Form.ThreeStepAutoProxodNaUrok)
async def ThreeStepAutoProxodNaUrok(message: types.message, state: FSMContext):
        await bot.delete_message(message.chat.id, message.message_id)
        async with state.proxy() as data:
            MessageId = data["id"]
            Questions = data["Questions"]
        time = times(message.text)
        try:
            if time == None:
                await bot.edit_message_text(f"–ß—Ç–æ-—Ç–æ —É–∫–∞–∑–∞–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ!\n–ü—Ä–∏–º–µ—Ä: 10m\ns - —Å–µ–∫—É–Ω–¥—ã, m - –º–∏–Ω—É—Ç—ã\n–ú–∞–∫—Å–∏–º—É–º - 35 –º–∏–Ω—É—Ç", message.chat.id, MessageId, reply_markup=ThreeStepAutoNaUrok)
                return
            elif time > 2220:
                await bot.edit_message_text(f"–ü—Ä–∏–º–µ—Ä: 10m\ns - —Å–µ–∫—É–Ω–¥—ã, m - –º–∏–Ω—É—Ç—ã\n–ú–∞–∫—Å–∏–º—É–º - 35 –º–∏–Ω—É—Ç", message.chat.id, MessageId, reply_markup=ThreeStepAutoNaUrok)
                return
            elif datetime.now()+timedelta(seconds=time+180) > datetime.fromtimestamp(Questions["session"]["start_at"])+timedelta(minutes=Questions["settings"]["duration"]) and Questions["settings"]["show_timer"] == 1:
                await bot.edit_message_text(f"–í—Ä–µ–º–µ–Ω–∏ –Ω–µ —Ö–≤–∞—Ç–∏—Ç! –ü–æ–ø—Ä–æ–±—É–π —É–º–µ–Ω—å—à–∏—Ç—å –≤—Ä–µ–º—è!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –±–µ—Ä–∏—Ç–µ –≤ —É—á–µ—Ç —Ç–∞–∫–∂–µ —Ç–∞–π–º–µ—Ä –ù–∞—É—Ä–æ–∫–∞!", message.chat.id, MessageId, reply_markup=ThreeStepAutoNaUrok)
                return
        except aiogram.utils.exceptions.MessageNotModified:
            return
        async with state.proxy() as data:
            data["time"] = time
            data["CorrectTime"] = message.text
            await bot.edit_message_text(f"–≠—Ç–æ –±—É–¥–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å –ø–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞!\n–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç—ã –≤ –≤–∏–¥–µ —Ñ–∞–π–ª–∏–∫–∞?\n–ü—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—Ç—å—Ç–µ <b>–î–∞</b> –∏–ª–∏ <b>–ù–µ—Ç</b>", message.chat.id, MessageId, reply_markup=FinallyStepAutoNaUrok, parse_mode="HTML") 
            await Form.FinallyStepAutoProxodNaUrok.set()
@dp.message_handler(state=Form.FinallyStepAutoProxodNaUrok)
async def FinallyStepAutoProxodNaUrok(message: types.message, state: FSMContext):
        await bot.delete_message(message.chat.id, message.message_id)
        async with state.proxy() as data:
            MessageId = data["id"]
            Questions = data["Questions"]
            time = data["time"]
            Wrong = data["WrongAnswers"]
            Url = data["Url"]
        if message.text.lower() == "–¥–∞":
            GetAnswers = True
        elif message.text.lower() == "–Ω–µ—Ç":
            GetAnswers = False
        else:
            return
        await VozvratToMenu("–û—Ç–ª–∏—á–Ω–æ! –ü—Ä–∏—Å—Ç—É–ø–∞—é –∫ —Ä–µ—à–µ–Ω–∏—é —Ç–µ—Å—Ç–∞! –Ø –æ–ø–æ–≤–µ—â—É –∫–æ–≥–¥–∞ —è –ø—Ä–æ–π–¥—É —Ç–µ—Å—Ç", message.chat.id, MessageId)
        balance = getbalance(message.chat.id)
        setbalance(message.chat.id,balance-Config["PriceAutoNaurok"])
        AddLogs(f"<a href='tg://user?id={message.from_user.id}'>{message.from_user.first_name}</a>({message.from_user.id}) –Ω–∞—á–∞–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —Ç–µ—Å—Ç –ù–∞–£—Ä–æ–∫!")
        async with state.proxy() as data:
            text = f"–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω!\n–ù–µ–≤–µ—Ä–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ - {Wrong}\n–í—Ä–µ–º—è - {data['CorrectTime']}"
        await state.finish()
        TrueAnsw = await autonaurok.GetTrueAnswers(Url, Wrong, GetAnswers)
        if GetAnswers == True:
            idfile = randint(1000, 9999)
            f = open(f"{idfile}.html", "w+", encoding='utf-8')
            f.write(TrueAnsw[3])
            f.close()
            await bot.send_document(message.chat.id, open(f"{idfile}.html", "rb"))
            os.remove(f"{idfile}.html")
        await autonaurok.avtoproxod(TrueAnsw, time)
        await bot.send_message(message.chat.id, text)
        AddLogs(f"<a href='tg://user?id={message.from_user.id}'>{message.from_user.first_name}</a>({message.from_user.id}) –ø—Ä–æ—à–µ–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ç–µ—Å—Ç –ù–∞–£—Ä–æ–∫!")




@dp.message_handler(state=Form.VseOsvita1Auto)
async def VseOsvita1Auto(message: types.message, state: FSMContext):
    balance = getbalance(message.from_user.id) 
    if balance == None or balance < Config["PriceAutoVseOsvita"]:
        await bot.delete_message(message.chat.id, message.message_id)
        async with state.proxy() as data:
            await VozvratToMenu("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å!", message.chat.id, data["id"], state)
    else:
        await bot.delete_message(message.chat.id, message.message_id)
        async with state.proxy() as data:
            await bot.edit_message_text("–û–∂–∏–¥–∞–π—Ç–µ. . .", message.chat.id, data["id"])
        Init = await hackvseo.HackVseo(message.text, CheckTest=True)
        if Init == "NeVseOsvita":
            try:
                async with state.proxy() as data:
                    await bot.edit_message_text("–ù–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –í—Å–µ–û—Å–≤–∏—Ç—É!\n–ü—Ä–∏–º–µ—Ä: https://vseosvita.ua/test/start/mef824", message.chat.id, data["id"], reply_markup=VseOsvita1AutoMarkup)
                    return
            except aiogram.utils.exceptions.MessageNotModified:
                    return
        elif Init == "TestEnded":
            async with state.proxy() as data:
                await VozvratToMenu("–¢–µ—Å—Ç –∑–∞–∫–æ–Ω—á–µ–Ω!", message.chat.id, data["id"], state)
                return
        async with state.proxy() as data:
            data["Url"] = message.text  
            data["Init"] = Init["payload"]
            await bot.edit_message_text(f"–£–∫–∞–∂–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ –Ω–µ–≤–µ—Ä–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å(—á–∏—Å–ª–æ–º)\n–í–æ–ø—Ä–æ—Å–æ–≤ –≤ —Ç–µ—Å—Ç–µ: {Init['payload']['execution']['count_quest']}", message.chat.id, data["id"], reply_markup=VseOsvita2AutoMarkup)
            await Form.VseOsvita2Auto.set()
@dp.message_handler(state=Form.VseOsvita2Auto)
async def VseOsvita2Auto(message: types.message, state: FSMContext):
        await bot.delete_message(message.chat.id, message.message_id)
        try:
            async with state.proxy() as data:
                Init = data["Init"]
                MessageId = data["id"]
            if int(message.text) >= int(Init['execution']['count_quest']):
                try:
                    await bot.edit_message_text(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –±–æ–ª—å—à–µ —á–µ–º –≤–æ–ø—Ä–æ—Å–æ–≤!\n–í–æ–ø—Ä–æ—Å–æ–≤ –≤ —Ç–µ—Å—Ç–µ: <b>{Init['execution']['count_quest']}</b>", message.chat.id, MessageId, parse_mode="HTML", reply_markup=VseOsvita2AutoMarkup)
                    return
                except aiogram.utils.exceptions.MessageNotModified:
                    return
            async with state.proxy() as data:
                data["WrongAnswers"] = int(message.text)
                await bot.edit_message_text(f"–£–∫–∞–∂–∏—Ç–µ –∫–∞–∫–æ–µ –∏–º—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∏ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞", message.chat.id, MessageId, reply_markup=VseOsvita3AutoMarkup)
                await Form.VseOsvita3Auto.set()
        except ValueError:
            try:
                await bot.edit_message_text(f"<b>–ß–ò–°–õ–û–û–û–ú!</b>\n–ö—Ö–º. . .\n–£–∫–∞–∂–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ –Ω–µ–≤–µ—Ä–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å(<b>–ß–ò–°–õ–û–ú</b>)\n–í–æ–ø—Ä–æ—Å–æ–≤ –≤ —Ç–µ—Å—Ç–µ: <b>{Init['execution']['count_quest']}</b>", message.chat.id, MessageId, reply_markup=VseOsvita2AutoMarkup, parse_mode="HTML")
            except aiogram.utils.exceptions.MessageNotModified:
                return

@dp.message_handler(state=Form.VseOsvita3Auto)
async def VseOsvita4Auto(message: types.message, state: FSMContext):
    async with state.proxy() as data:
            await bot.delete_message(message.chat.id, message.message_id)
            MessageId = data["id"]
            data["Name"] = str(message.text)
            await bot.edit_message_text(f"–£–∫–∞–∂–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –≤ —Ü–µ–ª–æ–º –Ω–∞ —Ç–µ—Å—Ç\n–£–∫–∞–∑—ã–≤–∞—Ç—å –≤—Ä–µ–º—è —Å –ø–æ–º–æ—â—å—é –ø—Ä–∏—Å—Ç–∞–≤–æ–∫: s\\m\\h\n–ü—Ä–∏–º–µ—Ä: 10m\ns - —Å–µ–∫—É–Ω–¥—ã, m - –º–∏–Ω—É—Ç—ã\n–ú–∞–∫—Å–∏–º—É–º - 35 –º–∏–Ω—É—Ç", message.chat.id, MessageId, reply_markup=VseOsvita4AutoMarkup)
            await Form.VseOsvita4Auto.set()
@dp.message_handler(state=Form.VseOsvita4Auto)
async def VseOsvita4Auto(message: types.message, state: FSMContext):
        await bot.delete_message(message.chat.id, message.message_id)
        async with state.proxy() as data:
            MessageId = data["id"]
            Init = data["Init"]
        time = times(message.text)
        try:
            if time == None:
                await bot.edit_message_text(f"–ß—Ç–æ-—Ç–æ —É–∫–∞–∑–∞–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ!\n–ü—Ä–∏–º–µ—Ä: 10m\ns - —Å–µ–∫—É–Ω–¥—ã, m - –º–∏–Ω—É—Ç—ã\n–ú–∞–∫—Å–∏–º—É–º - 35 –º–∏–Ω—É—Ç", message.chat.id, MessageId, reply_markup=VseOsvita4AutoMarkup)
                return
            elif time > 2220:
                await bot.edit_message_text(f"–ü—Ä–∏–º–µ—Ä: 10m\ns - —Å–µ–∫—É–Ω–¥—ã, m - –º–∏–Ω—É—Ç—ã\n–ú–∞–∫—Å–∏–º—É–º - 35 –º–∏–Ω—É—Ç", message.chat.id, MessageId, reply_markup=VseOsvita4AutoMarkup)
                return
            elif timedelta(seconds=time+60) > datetime.fromtimestamp(Init["execution"]["time_end"])-datetime.fromtimestamp(Init["execution"]["time_start"]):
                await bot.edit_message_text(f"–í—Ä–µ–º–µ–Ω–∏ –Ω–µ —Ö–≤–∞—Ç–∏—Ç! –ü–æ–ø—Ä–æ–±—É–π —É–º–µ–Ω—å—à–∏—Ç—å –≤—Ä–µ–º—è!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –±–µ—Ä–∏—Ç–µ –≤ —É—á–µ—Ç —Ç–∞–∫–∂–µ —Ç–∞–π–º–µ—Ä –í—Å–µ–û—Å–≤–∏—Ç—ã!", message.chat.id, MessageId, reply_markup=VseOsvita4AutoMarkup)
                return
        except aiogram.utils.exceptions.MessageNotModified:
            return
        async with state.proxy() as data:
            data["time"] = time
            data["CorrectTime"] = message.text
            await bot.edit_message_text(f"–≠—Ç–æ –±—É–¥–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å –ø–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞!\n–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç—ã –≤ –≤–∏–¥–µ —Ñ–∞–π–ª–∏–∫–∞?\n–ü—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—Ç—å—Ç–µ <b>–î–∞</b> –∏–ª–∏ <b>–ù–µ—Ç</b>", message.chat.id, MessageId, reply_markup=VseOsvita5AutoMarkup, parse_mode="HTML") 
            await Form.VseOsvita5Auto.set()
@dp.message_handler(state=Form.VseOsvita5Auto)
async def VseOsvita5Auto(message: types.message, state: FSMContext):
        await bot.delete_message(message.chat.id, message.message_id)
        async with state.proxy() as data:
            MessageId = data["id"]
            Init = data["Init"]
            time = data["time"]
            Wrong = data["WrongAnswers"]
            Url = data["Url"]
            Name = data["Name"]
        if message.text.lower() in ["–¥–∞", "da", "yes"]:
            GetAnswers = True
        elif message.text.lower() in ["–Ω–µ—Ç", "net", "no"]:
            GetAnswers = False
        else:
            return
        await VozvratToMenu("–û—Ç–ª–∏—á–Ω–æ! –ü—Ä–∏—Å—Ç—É–ø–∞—é –∫ —Ä–µ—à–µ–Ω–∏—é —Ç–µ—Å—Ç–∞! –Ø –æ–ø–æ–≤–µ—â—É –∫–æ–≥–¥–∞ —è –ø—Ä–æ–π–¥—É —Ç–µ—Å—Ç", message.chat.id, MessageId)
        balance = getbalance(message.chat.id)
        setbalance(message.chat.id,balance-Config["PriceAutoVseOsvita"])
        AddLogs(f"<a href='tg://user?id={message.from_user.id}'>{message.from_user.first_name}</a>({message.from_user.id}) –Ω–∞—á–∞–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —Ç–µ—Å—Ç –í—Å–µ–û—Å–≤–∏—Ç—ã!")
        async with state.proxy() as data:
            text = f"–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω!\n–ù–µ–≤–µ—Ä–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ - {Wrong}\n–í—Ä–µ–º—è - {data['CorrectTime']}"
        await state.finish()
        HtmlAnswer = await hackvseo.HackVseo(Url)
        idfile = randint(1000, 9999)
        f = open(f"{idfile}.html", "w+", encoding='utf-8')
        f.write(HtmlAnswer["HTMLANSWER"])
        f.close()
        if GetAnswers == True:
            await bot.send_document(message.chat.id, open(f"{idfile}.html", "rb"))
        await autovseosvita.autovseo(f"{idfile}.html", Name, Init["config"]["code"], Wrong, time)
        os.remove(f"{idfile}.html")
        await bot.send_message(message.chat.id, text)
        AddLogs(f"<a href='tg://user?id={message.from_user.id}'>{message.from_user.first_name}</a>({message.from_user.id}) –ø—Ä–æ—à–µ–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ç–µ—Å—Ç –í—Å–µ–æ—Å–≤–∏—Ç—ã!")

